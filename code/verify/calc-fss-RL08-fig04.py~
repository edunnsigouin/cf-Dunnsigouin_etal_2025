"""
Calculates and plots the fractional skill score plot from 
an idealized rain band case shown in Fig. 4 of Roberts and 
Lean 2008 MWR.
"""

import numpy as np
from matplotlib  import pyplot as plt
from forsikring  import misc,config

def calc_frac(N,Nx,Ny,data):
    """
    Generates fractions following equations 2 and 3 from
    Roberts and Lean 2008 MWR given binary input data
    """

    frac = np.zeros([2*N-1,Nx,Ny])
    
    for n in range(1,2*N,2):
        for i in range(0,Nx):
            for j in range(0,Ny):

                k             = np.arange(0, n, dtype=int)
                l             = np.arange(0, n, dtype=int)
                ii            = (i + k  - (n-1)/2).astype(int)
                jj            = (j + l  - (n-1)/2).astype(int)
                temp_ii       = np.copy(ii)
                temp_jj       = np.copy(jj)
                ii            = ii[(temp_ii > -1) & (temp_ii < Nx)]
                jj            = jj[(temp_jj > -1) & (temp_jj < Ny)]
                frac[n-1,i,j] = data[ii[0]:ii[-1]+1,jj[0]:jj[-1]+1].sum(axis=0).sum(axis=0)/n**2
    
    return frac

# INPUT -----------------------
Nx         = 50
Ny         = 50
N          = np.maximum(Nx,Ny)
write2file = False
# -----------------------------

# define output filename                                                                                                                                                                                
path_out  = config.dirs['fig'] + 'ecmwf/forecast/daily/'
figname   = 'fss_RL08_fig04_' + 'Nx' + str(Nx) + '_Ny' + str(Ny) + '.pdf'

# initialize array of rain bands
Io         = np.zeros([Nx,Ny])
Im         = np.zeros([Nx,Ny,4])
Io[:,0]    = 1
Im[:,1,0]  = 1
Im[:,4,1]  = 1
Im[:,12,2] = 1
Im[:,22,3] = 1

# calculate theoretical FSS values
fo          = np.count_nonzero(Io)/Nx/Ny
fm          = np.count_nonzero(Im[:,:,0])/Nx/Ny
FSS_random  = fo # base rate fo
FSS_uniform = 0.5 + fo/2  


Im[:,:,0] = fo

print(FSS_random,FSS_uniform)

# loop over example forecasts
FSS = np.zeros([2*N-1,4])
for i in range(0,4,1):

    print(i)
    misc.tic()
    # calc fractions 
    O = calc_frac(N,Nx,Ny,Io)
    M = calc_frac(N,Nx,Ny,Im[:,:,i])
    misc.toc()

    misc.tic()
    # calc MSE
    error   = (O - M)**2
    MSE     = error.sum(axis=2).sum(axis=1)/Nx/Ny
    MSE_REF = (1/Nx/Ny)*(np.sum(np.sum(O**2,axis=2),axis=1) + np.sum(np.sum(M**2,axis=2),axis=1))
    
    # calc fractional skill score
    FSS[:,i] =  1.0 - MSE/MSE_REF
    misc.toc()


#plt.contourf(M[10,:,:])
#plt.show()
    
print(FSS[:,0])
    
# plot 
fontsize  = 11
figsize   = np.array([4*1.61,4])
fig,ax    = plt.subplots(nrows=1,ncols=1,figsize=(figsize[0],figsize[1]))

x      = np.arange(0,2*N,2)
colors = ['k','tab:blue','tab:red','tab:green']
labels = ['1pt','3pt','11pt','21pt']
for i in range(0,4,1):
    ax.plot(x+1,FSS[x,i],color=colors[i],linewidth=1.5,label=labels[i])

ax.axhline(y=FSS_random, color='k', linestyle='--',linewidth=1.25)
ax.axhline(y=FSS_uniform, color='k', linestyle='--',linewidth=1.25)
    
ax.legend(frameon=False,fontsize=fontsize)
ax.set_xticks(np.arange(0,60,10))
ax.set_xticklabels(np.arange(0,60,10),fontsize=fontsize)
ax.set_yticks(np.round(np.arange(0,1.2,0.2),2))
ax.set_yticklabels(np.round(np.arange(0,1.2,0.2),2),fontsize=fontsize)
ax.set_xlim([0,50])
ax.set_ylim([0,1.0])
ax.set_xlabel('grid squares',fontsize=fontsize)
ax.set_ylabel('fractions skill score',fontsize=fontsize)
plt.tight_layout()
if write2file: plt.savefig(path_out + figname)
plt.show()



