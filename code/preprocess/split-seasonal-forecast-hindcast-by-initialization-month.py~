"""
Splits seasonal forecasts/hindcast data into monthly initialization
files from their aggregated format into years.
Renames the lead_time_month dimension to time for consistency with s2s 
data.
"""

import numpy  as np
import xarray as xr
import pandas as pd
import os
from forsikring import config,misc,s2s

# INPUT -----------------------------------------------
variables        = ['tp','t2m']
data_flag        = 'hindcast' # forecast or hindcast
forecast_years   = np.arange(1993,2017,1)
forecast_months  = np.arange(1,13,1)
lead_time_months = np.arange(1,7,1)
comp_lev         = 5
write2file       = True
# -----------------------------------------------------

for variable in variables:
        for year in forecast_years:

                print('\nvariable: ' + variable + ', year: ' + str(year))
                
                # define stuff
                path_in     = config.dirs['seasonal_' + data_flag] + variable + '/'
                path_out    = config.dirs['seasonal_' + data_flag + '_monthly'] + variable + '/'
                filename_in = variable + '_' + str(year) + '.nc' 

                # loop through all forecast months, take ensemble mean,
                # rename lead_time_months to time for consistency with s2s data,
                # and write out one file per initialization month.
                for m, month in enumerate(forecast_months):
                        
                        date                          = str(year) + '-' + str(month).zfill(2)
                        ds                            = xr.open_dataset(path_in + filename_in).sel(time=date).mean(dim='number').squeeze().drop('time')
                        ds                            = ds.rename({'lead_time_month':'time'})
                        time                          = pd.date_range(date,periods=lead_time_months.size,freq="MS")
                        ds['time']                    = time
                        ds['time'].attrs['long_name'] = 'months since forecast_reference_time'

                        # fix metadata
                        if variable == 'tp':
                                ds[variable].attrs['long_name'] = 'total accumulated monthly precipitation'
                                ds[variable].attrs['units']     = 'm'
                        elif variable == 't2m':
                                ds[variable].attrs['long_name'] = '2m temperature'
                                ds[variable].attrs['units']     = 'K'

                        if write2file:
                                filename_out = variable + '_' + date + '.nc'
                                ds.to_netcdf(path_out + filename_out)
                                s2s.compress_file(comp_lev,3,filename_out,path_out)

                        ds.close()


