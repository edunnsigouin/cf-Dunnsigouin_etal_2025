"""
Converts s2s forecast format data into anomaly relative
to smoothed climatological mean from hindcast data for Fig. 5 of paper.
Anomalies are normalized. 
If daily forecast date does not correspond to bi-weekly hindcast date,
the we use the most recent hindcast as the climatology for a given forecast. 
"""

import numpy      as np
import xarray     as xr
import pandas     as pd
import os
from   datetime   import datetime
from   forsikring import misc,s2s,config,verify

def find_most_recent_hindcast(forecast_file, hindcast_dir):
    # Extract date from the forecast filename
    forecast_date_str = os.path.basename(forecast_file).split('_')[-1].split('.')[0]
    forecast_date = datetime.strptime(forecast_date_str, '%Y-%m-%d')
    
    # List all hindcast files in the directory
    hindcast_files = [f for f in os.listdir(hindcast_dir) if f.endswith('.nc')]
    
    # Find the most recent hindcast file
    most_recent_hindcast = None
    most_recent_date = None
    
    for file in hindcast_files:
        hindcast_date_str = file.split('_')[-1].split('.')[0]
        hindcast_date = datetime.strptime(hindcast_date_str, '%Y-%m-%d')
        
        if hindcast_date <= forecast_date:
            if most_recent_date is None or hindcast_date > most_recent_date:
                most_recent_hindcast = file
                most_recent_date = hindcast_date
    
    return os.path.join(hindcast_dir, most_recent_hindcast) if most_recent_hindcast else None


# INPUT -----------------------------------------------
time_flag           = 'daily'                 # daily or weekly
variable            = 'tp24'              # tp24,rn24,mx24rn6,mx24tp6,mx24tpr
first_forecast_date = '20230803'             # first initialization date of forecast (either a monday or thursday)
number_forecasts    = 6                      # number of forecasts 
season              = 'annual'
grid                = '0.25x0.25'          # '0.25x0.25' & '0.5x0.5'
domain              = 'scandinavia'
box_sizes           = np.arange(1,61,2)        # smoothing box size in grid points per side. Must be odd!  
write2file          = True
# -----------------------------------------------------

# get forecast dates
forecast_dates = pd.date_range(first_forecast_date, periods=number_forecasts).strftime('%Y-%m-%d')
print(forecast_dates)

for date in forecast_dates:

    misc.tic()
    print('\n ' + variable + ', ' + grid + ', ' + date)
        
    # define stuff
    path_in_forecast  = config.dirs['s2s_forecast_daily'] + variable + '/'
    path_in_hindcast  = config.dirs['s2s_hindcast_daily'] + variable + '/'
    path_out          = config.dirs['s2s_forecast_' + time_flag + '_anomaly'] + '/' + domain + '/' + variable + '/'
    filename_forecast = path_in_forecast + variable + '_' + grid + '_' + date + '.nc'
    filename_hindcast = find_most_recent_hindcast(filename_forecast, path_in_hindcast) # find most recent bi-weekly hindcast! 
    filename_out      = path_out + variable + '_' + grid + '_' + date + '_standardized.nc'
    #filename_hindcast = '/nird/projects/NS9873K/etdu/processed/cf-forsikring/s2s/ecmwf/hindcast/daily/values/tp24/tp24_0.25x0.25_2023-08-07.nc'
    
    # read forecast and hindcast format data from specific domain
    dim      = verify.get_data_dimensions(grid, time_flag, domain)
    forecast = xr.open_dataset(filename_forecast).sel(latitude=dim.latitude, longitude=dim.longitude, method='nearest')[variable]
    hindcast = xr.open_dataset(filename_hindcast).sel(latitude=dim.latitude, longitude=dim.longitude, method='nearest')[variable]

    # calculate hindcast climatology and forecast ensemble mean
    #hindcast = hindcast.mean(dim='number').mean(dim='hdate')
    #forecast = forecast.mean(dim='number')
    
    # apply spatial smoothing. Note here that in order to standardize correctly,
    # you need to smooth the forecast & hindcast before standardizing since                                                                              
    # its not a linear operation.  
    forecast = verify.boxcar_smoother_xy_optimized(box_sizes, forecast, 'xarray')
    hindcast = verify.boxcar_smoother_xy_optimized(box_sizes, hindcast, 'xarray')

    # calc smoothed & standardized anomaly.
    # sample to calculate climatology and standard deviation is hindcast initialization dates + ensemble members
    dim_sizes      = hindcast.shape
    hindcast_numpy = hindcast.values # convert to numpy
    hindcast_numpy = np.reshape(hindcast_numpy,[dim_sizes[0],dim_sizes[1],dim_sizes[2]*dim_sizes[3],dim_sizes[4],dim_sizes[5]]) # concatenate hdate and number dims for sample
    anomaly        = (forecast.mean(dim='number') - hindcast_numpy.mean(axis=2)) / hindcast_numpy.std(axis=2)
    #anomaly        = forecast.mean(dim='number') - hindcast_numpy.mean(axis=2)
    
    # modify metadata
    anomaly = anomaly.rename(variable)
    if variable == 'tp24':
        anomaly.attrs['units']     = 'm'
        anomaly.attrs['long_name'] = 'anomalies of daily accumulated precipitation'
    elif variable == 't2m24':
        anomaly.attrs['units']     = 'K'
        anomaly.attrs['long_name'] = 'anomalies of daily-mean 2-meter temperature'
    elif variable == 'rn24':
        anomaly.attrs['units']     = 'm'
        anomaly.attrs['long_name'] = 'anomalies of daily accumulated rainfall'
    elif variable == 'mx24tpr':
        anomaly.attrs['units']     = 'kg m**-2 s**-1'
        anomaly.attrs['long_name'] = 'anomalies of daily maximum timestep precipitation rate'
    elif variable == 'mx24tp6':
        anomaly.attrs['units']     = 'm'
        anomaly.attrs['long_name'] = 'anomalies of daily maximum 6 hour accumulated precipitation'
    elif variable == 'mx24rn6':
        anomaly.attrs['units']     = 'm'
        anomaly.attrs['long_name'] = 'anomalies of daily maximum 6 hour accumulated rainfall'

    # write output
    if write2file: misc.to_netcdf_with_packing_and_compression(anomaly, filename_out)

    forecast.close()
    hindcast.close()
    anomaly.close()
    
    misc.toc()



