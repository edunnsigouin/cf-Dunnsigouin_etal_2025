"""
Converts era5 yearly files into the same format as ecmwf forecasts
initialized on mondays and thursdays. i.e. for each lead time in a forecast
file, we collect the analagous era5 dates and put them into a new file.
example: tp24_CY47R1_0.25x0.25_2021-01-04.nc is the forecast file
and the new era5 file is tp24_0.25x0.25_2021-01-04.nc with dates corresponding
to jan 04 to jan 04 + 46 days.
"""

import numpy  as np
import xarray as xr
import pandas as pd
from dask.diagnostics   import ProgressBar
import os
from forsikring import config,misc,s2s

# INPUT -----------------------------------------------
variables        = ['mx24tp6']                # tp24,rn24,mx24rn6,mx24tp6,mx24tpr
mon_thu_start    = ['20210104','20210107'] # first monday & thursday initialization date of forecast
num_i_weeks      = 52                       # number of weeks withe forecasts
grid             = '0.5/0.5'             # '0.25/0.25' or '0.5/0.5'
comp_lev         = 5
write2file       = True
# -----------------------------------------------------         

# get all dates for monday and thursday forecast initializations 
dates_monday_thursday = s2s.get_monday_thursday_dates(mon_thu_start,num_i_weeks)

for variable in variables:
    for date in dates_monday_thursday:

        datestring = date.strftime('%Y-%m-%d')
        year       = date.strftime('%Y')
        print('')
        print('variable: ' + variable + ', date: ' + datestring)

        # define some paths and strings   
        if grid == '0.25/0.25': gridstring = '0.25x0.25'
        elif grid == '0.5/0.5': gridstring = '0.5x0.5'
        path_in      = config.dirs['era5_daily_raw'] + variable + '/'
        filename1_in = variable + '_' + gridstring + '_' + year + '.nc'
        filename2_in = variable + '_' + gridstring + '_' + str(int(year)+1) + '.nc'
        
        path_out     = config.dirs['era5_daily'] + variable + '/'
        filename_out = '%s_%s_%s.nc'%(variable,gridstring,datestring)

        # read data & pick out specific dates (46 = # of days in ecmwf forecast) 
        era5_dates = pd.date_range(date,periods=46,freq="D")
        ds         = xr.open_mfdataset([path_in + filename1_in,path_in + filename2_in]).sel(time=era5_dates)
                
        # calculate explicitely
        with ProgressBar():
            ds = ds.compute()

        if write2file:
            print('writing to file..')
            s2s.to_netcdf_pack64bit(ds[variable],path_out + filename_out)
            print('compress file to reduce space..')
            s2s.compress_file(comp_lev,3,filename_out,path_out)
            print('')

        ds.close()
