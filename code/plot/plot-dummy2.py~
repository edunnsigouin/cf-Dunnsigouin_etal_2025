import numpy as np
import xarray as xr
from matplotlib import pyplot as plt
import matplotlib as mpl
import matplotlib.gridspec as gridspec
import cartopy.crs as ccrs
from forsikring import misc, s2s, config

def setup_subplot_xy(flag, ax, ds1, ds2, clevs, cmap, fontsize, title, stats):
    lat = ds2.latitude
    lon = ds2.longitude

    p = ax.contourf(lon, lat, ds2, levels=clevs, cmap=cmap, extend='max', transform=ccrs.PlateCarree())
    ax.contour(lon, lat, ds2, levels=clevs, colors='white', linewidths=0.5, transform=ccrs.PlateCarree())

    ds1_mask = ds1 > 0.8
    ds1_mask = ds1_mask.where(ds1_mask, np.nan)
    ax.pcolor(lon, lat, ds1_mask, hatch='..', cmap=mpl.colors.ListedColormap(['none']), edgecolor='red', lw=0)
    
    rectangle_length = 0.25 * ds2['box_size']
    rectangle = plt.Rectangle((31.75, 72.75), rectangle_length, rectangle_length,
                              angle=180, fc='none', ec='red', lw=2, transform=ccrs.PlateCarree())
    ax.add_patch(rectangle)

    ax.coastlines()
    ax.set_title(title, fontsize=fontsize + 4, loc='left', ha='left', y=0.91, x=0.02,
                 bbox={'facecolor': 'white', 'edgecolor': 'black', 'pad': 3})
    
    if flag < 7:
        ax.text(0.1, 0.89, stats, fontsize=fontsize + 2, transform=ax.transAxes)

    return p

# Settings
time_flag = 'daily'
variable = 'tp24'
domain = 'scandinavia'
date = '2023-08-07'
grid = '0.25x0.25'
write2file = False
fontsize = 11
clevs = np.arange(5, 55, 5)
cmap = 'GnBu'
path_out = config.dirs['fig'] + 'paper/'
figname_out = 'dummy.png'

# Define dimensions
dim = misc.get_dim(grid, 'daily')

# Define filepaths
fcst_path = config.dirs['s2s_forecast_' + time_flag + '_EFI'] + domain + '/' + variable + '/'
era5_path = config.dirs['era5_forecast_' + time_flag + '_EFI'] + domain + '/' + variable + '/'

filenames = [
    (fcst_path + 'tp24_0.25x0.25_2023-08-03_EFI.nc', 1),
    (fcst_path + 'tp24_0.25x0.25_2023-08-03_EFI.nc', 33),
    (fcst_path + 'tp24_0.25x0.25_2023-08-05_EFI.nc', 1),
    (fcst_path + 'tp24_0.25x0.25_2023-08-05_EFI.nc', 19),
    (fcst_path + 'tp24_0.25x0.25_2023-08-07_EFI.nc', 1),
    (fcst_path + 'tp24_0.25x0.25_2023-08-07_EFI.nc', 9),
    (era5_path + 'tp24_0.25x0.25_2023-08-07_EFI.nc', 1),
    (era5_path + 'tp24_0.25x0.25_2023-08-07_EFI.nc', 33),
]

datasets = []
for fn, box_size in filenames:
    ds = xr.open_dataset(fn).sel(time=date).sel(box_size=box_size)
    ds = ds.sel(latitude=dim.latitude, longitude=dim.longitude, method='nearest')
    datasets.append(ds)

# Generate stats labels
stats = [
    f"FMSESS = {ds['fmsess'].values:.2f}\nFBSS$_{{0.9}}$ = {ds['fbss'].values:.2f}"
    for ds in datasets[:6]
]

# Titles
titles = [
    'a) 1 gridpoint$^2$ precision', 'b) 33 gridpoint$^2$ precision',
    'c) 1 gridpoint$^2$ precision', 'd) 19 gridpoint$^2$ precision',
    'e) 1 gridpoint$^2$ precision', 'f) 9 gridpoint$^2$ precision',
    'g) 1 gridpoint$^2$ precision', 'h) 33 gridpoint$^2$ precision'
]

# Set up figure and gridspec
fig = plt.figure(figsize=(12, 16))
gs = gridspec.GridSpec(nrows=4, ncols=2, figure=fig, 
                       wspace=0.05, hspace=0.15,
                       top=0.95, bottom=0.12, left=0.08, right=0.95)

axes = [fig.add_subplot(gs[i, j], projection=ccrs.PlateCarree()) 
        for i in range(4) for j in range(2)]

# Plot
for i, ax in enumerate(axes):
    ds = datasets[i]
    stats_label = stats[i] if i < 6 else ''
    setup_subplot_xy(i+1, ax, ds['EFI'], ds[variable], clevs, cmap, fontsize, titles[i], stats_label)

# Colorbar
cbar_ax = fig.add_axes([0.25, 0.05, 0.5, 0.02])
cb = fig.colorbar(axes[0].collections[0], cax=cbar_ax, orientation='horizontal', ticks=clevs)
cb.ax.tick_params(labelsize=fontsize + 2)
cb.ax.set_title('daily accumulated precipitation [mm/day]', fontsize=fontsize + 4, y=1.01)

# Row labels
row_labels = ['forecast lead day 5', 'forecast lead day 3',
              'forecast lead day 1', 'verification August 7th 2023']
row_positions = [0.875, 0.63, 0.385, 0.14]

for y, label in zip(row_positions, row_labels):
    fig.text(0.02, y, label, fontsize=fontsize + 4, va='center', ha='right', rotation=90)

# Column labels
col_labels = ['grid scale', 'aggregated']
col_positions = [0.28, 0.73]

for x, label in zip(col_positions, col_labels):
    fig.text(x, 0.975, label, fontsize=fontsize + 4, va='bottom', ha='center')

# Save or show
if write2file:
    plt.savefig(path_out + figname_out, dpi=300)
plt.show()
