"""
Plots the fraction skill score calculated 
for anomalous forecasts as a funciton of time
and spatial scale.
"""

import numpy       as np
import xarray      as xr
from matplotlib    import pyplot as plt
from forsikring    import misc,s2s,config
import matplotlib  as mpl
import scipy.stats as stats

"""
def calc_significance(ds_ctl,ds_exp,threshold):
    
    Calculates significance of difference between the means
    of the two bootstrapped distributions for each box_size and time
    
    box_size = ds_ctl['box_size'].values
    time     = ds_ctl['time'].values    
    sig      = np.zeros((box_size.size,time.size))
    fss_ctl  = ds_ctl['fss_bootstrapped'].values
    fss_exp  = ds_exp['fss_bootstrapped'].values
    
    for i in range(0,box_size.size):
        for j in range(0,time.size):            
            [temp,sig[i,j]] = stats.ttest_ind(fss_ctl[i,j,:],fss_exp[i,j,:], equal_var=True)
            if sig[i,j] > threshold:
                sig[i,j] = 0.0
            else:
                sig[i,j] = 1.0
    return sig
"""

def calc_significance(ds_ctl, ds_exp, significance_threshold):
    """
    Calculates significance of difference between the means
    of the two bootstrapped distributions for each box_size and time.
    
    Parameters:
    - ds_ctl: Control dataset
    - ds_exp: Experiment dataset
    - significance_threshold: Threshold for statistical significance

    Returns:
    - Binary matrix indicating significance for each combination of box_size and time.
    """
    
    # Extract necessary data
    box_sizes = ds_ctl['box_size'].values
    times     = ds_ctl['time'].values  
    fss_ctl   = ds_ctl['fss_bootstrap'].values
    fss_exp   = ds_exp['fss_bootstrap'].values
    
    # Define constants for significance
    NOT_SIGNIFICANT = 0.0
    SIGNIFICANT     = 1.0
    
    # Initialize result matrix
    significance_matrix = np.zeros((box_sizes.size, times.size))
    
    # Calculate significance for each box_size and time combination
    for i, box_size in enumerate(box_sizes):
        for j, time in enumerate(times):
            _, p_value = stats.ttest_ind(fss_ctl[i, j, :], fss_exp[i, j, :], equal_var=True)
            significance_matrix[i, j] = SIGNIFICANT if p_value <= significance_threshold else NOT_SIGNIFICANT

    #significance_matrix  = np.ma.masked_less(significance_matrix, 0.5)            
    return significance_matrix



# INPUT -----------------------
time_flag           = 'time'                        # time or timescale ?
variable            = 'tp24'                        # tp24,rn24,mx24rn6,mx24tp6,mx24tpr
domains             = ['europe','southern_europe']  # europe/nordic/vestland                       
first_forecast_date = '20200102'                    # first initialization date of forecast (either a monday or thursday)
number_forecasts    = 313                           # number of weeks with forecasts
season              = 'annual'
grid                = '0.25x0.25'
write2file          = False
# -----------------------------

# define stuff         
forecast_dates   = s2s.get_forecast_dates(first_forecast_date,number_forecasts,season).strftime('%Y-%m-%d')
path_in          = config.dirs['verify_s2s_forecast_daily']
path_out         = config.dirs['fig'] + 's2s/ecmwf/daily/forecast/'

filename_in_ctl  = time_flag + '_vs_ss_fss_anomaly_' + variable + '_' + domains[0] + \
                       '_' + season + '_' + forecast_dates[0] + '_' + forecast_dates[-1] + '_' + grid + '.nc'
filename_in_exp  = time_flag + '_vs_ss_fss_anomaly_' + variable + '_' + domains[1] + \
                       '_' + season + '_' + forecast_dates[0] + '_' + forecast_dates[-1] + '_' + grid + '.nc'
figname_out      = time_flag + '_vs_spatialscale_fss_anomaly_' + variable + '_anomaly_' + domains[1] + \
                       '_' + season + '_' + forecast_dates[0] + '_' + forecast_dates[-1] + '_' + grid + '.pdf'
    
# read in data
ds_ctl = xr.open_dataset(path_in + filename_in_ctl)
ds_exp = xr.open_dataset(path_in + filename_in_exp)
y      = ds_ctl['box_size'].values
x      = ds_ctl[time_flag].values

# calculate significance of difference in fss
sig = calc_significance(ds_ctl,ds_exp,0.05)

print(sig)
"""
# plot 
fontsize = 11
clevs    = np.arange(-0.16, 0.16, 0.01)
cmap     = mpl.cm.get_cmap("RdBu_r").copy()
figsize  = np.array([6*1.61,6])
fig,ax   = plt.subplots(nrows=1,ncols=1,figsize=(figsize[0],figsize[1]))

p = ax.contourf(x,y,ds_ctl['fss']-ds_exp['fss'],levels=clevs,cmap=cmap,extend='min')
ax.pcolor(x,y, sig, hatch='\\\\',cmap=mpl.colors.ListedColormap(['none']),edgecolor=[0.8,0.8,0.8],lw=0)

ax.set_xticks(x)
ax.set_xticklabels(['1','','3','','5','','7','','9','','11','','13','','15'],fontsize=fontsize)
ax.set_xlabel(r'lead time [days]',fontsize=fontsize)
ax.set_xlim([x[0],x[-1]])

ax.set_yticks(np.array([1,9,17,25,33,41,49,57]))
ax.set_yticklabels(['1/0.25/9','9/2.25/81','17/4.25/153','25/6.25/225','33/8.25/297','41/10.25/369','49/12.25/441','57/14.25/513'],fontsize=fontsize)
ax.set_ylabel(r'spatial scale [gridpoints$^2$/degrees$^2$/km$^2$]',fontsize=fontsize)
ax.set_ylim([y[0],y[-2]])

cb = fig.colorbar(p, ax=ax, orientation='vertical',ticks=clevs[::2],pad=0.025,aspect=15)
cb.ax.set_title('fss',fontsize=fontsize)
cb.ax.tick_params(labelsize=fontsize,size=0)

plt.tight_layout()
if write2file: plt.savefig(path_out + figname_out)
plt.show()
"""

