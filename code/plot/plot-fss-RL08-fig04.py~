"""
Calculates and plots the fractional skill score plot from 
an idealized rain band case shown in Fig. 4 of Roberts and 
Lean 2008 MWR.
"""

import numpy as np
from matplotlib  import pyplot as plt
from forsikring  import misc,s2s,config

# INPUT -----------------------
Nx         = 50 # size of domain in X
Ny         = 50 # size of domain in Y
N          = 50 # size of neighborhoods
location   = 50  # location of observational rain band in domain   
distance   = 5 # distance of model forecast rainband from observations  
write2file = False
# -----------------------------

# define output filename                               
path_out  = config.dirs['fig'] + 'ecmwf/forecast/daily/'
figname1  = 'fss_RL08_fig04_dx' + str(distance) + '_Nx' + str(Nx) + '_Ny' + str(Ny) + '.pdf'
figname2  = 'xy_RL08_fig04_dx' + str(distance) + '_Nx' + str(Nx) + '_Ny' + str(Ny) + '.pdf'

# initialize array of observational and forecast rain bands
O                      = np.zeros([Nx,Ny])
F                      = np.zeros([Nx,Ny])
O[:,location]          = 1.0
F[:,location+distance] = 1.0

# calc fractions 
O_frac = s2s.calc_frac_RL08MWR(N,O)
F_frac = s2s.calc_frac_RL08MWR(N,F)

# calc fss
fss = s2s.calc_fss_RL08MWR(O_frac,F_frac,F_frac,method='classic')

print(fss)

# plot 
x        = np.arange(0,2*N,2)
fontsize = 11
figsize  = np.array([4*1.61,4])
fig,ax   = plt.subplots(nrows=1,ncols=1,figsize=(figsize[0],figsize[1]))

ax.plot(x+1,fss[x],color='k',linewidth=1.5)
ax.plot(x+1,fss[x],marker='o',markersize=fontsize-5,color='k')
        
ax.set_xticks(np.arange(0,60,10))
ax.set_xticklabels(np.arange(0,60,10),fontsize=fontsize)
ax.set_yticks(np.round(np.arange(0,1.2,0.2),2))
ax.set_yticklabels(np.round(np.arange(0,1.2,0.2),2),fontsize=fontsize)
ax.set_xlim([0,50])
ax.set_ylim([0,1.0])
ax.set_xlabel('grid squares',fontsize=fontsize)
ax.set_ylabel('fractions skill score',fontsize=fontsize)
plt.tight_layout()
if write2file: plt.savefig(path_out + figname1)
plt.show()


# plot 
fontsize = 11
figsize  = np.array([10,10])
fig,axes = plt.subplots(nrows=2,ncols=2,sharey=True,sharex=True,figsize=(figsize[0],figsize[1]))
axes     = axes.flat

c0 = axes[0].pcolor(O,cmap='binary',vmin=0, vmax=1.0)
c1 = axes[1].pcolor(F,cmap='binary',vmin=0, vmax=1.0)
c2 = axes[2].pcolor(O_frac[8,:,:],cmap='binary',vmin=0, vmax=1.0)
c3 = axes[3].pcolor(F_frac[8,:,:],cmap='binary',vmin=0, vmax=1.0)

plt.colorbar(c0, ax=axes[0])
plt.colorbar(c1, ax=axes[1])
plt.colorbar(c2, ax=axes[2])
plt.colorbar(c3, ax=axes[3])

axes[0].set_xticks(np.arange(0,60,10))
axes[0].set_xticklabels(np.arange(0,60,10),fontsize=fontsize)
axes[0].set_yticks(np.arange(0,60,10))
axes[0].set_yticklabels(np.arange(0,60,10),fontsize=fontsize)
axes[0].set_xlim([0,50])
axes[0].set_ylim([0,50])

axes[2].set_xlabel('x',fontsize=fontsize)
axes[3].set_xlabel('x',fontsize=fontsize)
axes[0].set_ylabel('y',fontsize=fontsize)
axes[2].set_ylabel('y',fontsize=fontsize)

axes[0].set_title('observation',fontsize=fontsize)
axes[1].set_title('forecast',fontsize=fontsize)
axes[2].set_title('observation (N=9)',fontsize=fontsize)
axes[3].set_title('forecast (N=9)',fontsize=fontsize)

plt.tight_layout()
if write2file: plt.savefig(path_out + figname2)
plt.show()




