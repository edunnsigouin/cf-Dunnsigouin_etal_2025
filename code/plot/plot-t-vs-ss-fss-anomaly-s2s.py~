"""
Plots the fraction skill score calculated 
for anomalous forecasts as a funciton of time
and spatial scale.
"""

import numpy     as np
import xarray    as xr
from matplotlib  import pyplot as plt
from forsikring  import misc,s2s,config
import matplotlib as mpl

# INPUT -----------------------
variable            = 'tp24'                   # tp24,rn24,mx24rn6,mx24tp6,mx24tpr
domain              = 'europe'                 # europe/nordic/vestland                       
first_forecast_date = '20200102'               # first initialization date of forecast (either a monday or thursday)
number_forecasts    = 313                      # number of weeks with forecasts
grid                = '0.25x0.25'
write2file          = False
# -----------------------------

# define stuff         
forecast_dates   = s2s.get_forecast_dates(first_forecast_date,number_forecasts).strftime('%Y-%m-%d')
path_in          = config.dirs['verify_s2s_forecast_daily']
path_out         = config.dirs['fig'] + 's2s/ecmwf/daily/forecast/'
filename_in      = 't_vs_ss_fss_anomaly_' + variable + '_' + grid + '_' + domain + \
                   '_' + forecast_dates[0] + '_' + forecast_dates[-1] + '.nc'
figname_out      = 't_vs_ss_fss_anomaly_' + variable + '_' + grid + '_' + domain + \
                       '_' + forecast_dates[0] + '_' + forecast_dates[-1] + '.pdf'

# read in data
ds   = xr.open_dataset(path_in + filename_in)
fss  = ds['fss'].values
x    = ds['box_size'].values
t    = ds['time'].values
x2   = np.array([1,9,19,29,39,49,59])

# calculate significance
temp = ds['fss_bootstrap'].quantile(0.05,dim='number_shuffle_bootstrap',skipna=True).values
sig  = (temp < 0).astype(np.int32) # when 5th percentile crosses zero
sig  = np.ma.masked_less(sig, 0.5)

# plot 
fontsize = 11
clevs    = np.arange(0.0, 1.05, 0.05)
cmap     = mpl.cm.get_cmap("RdBu_r").copy()
cmap.set_bad(color=[0.8,0.8,0.8]) # set nans to specified color
figsize  = np.array([6*1.61,6])
fig,ax   = plt.subplots(nrows=1,ncols=1,figsize=(figsize[0],figsize[1]))

#p = ax.pcolormesh(t,x,fss,cmap=cmap,vmin=0.0,vmax=1.0)
p = ax.contourf(t,x,fss,levels=clevs,cmap=cmap)
ax.pcolor(t, x, sig, hatch='\\\\',cmap=mpl.colors.ListedColormap(['none']),edgecolor=[0.8,0.8,0.8],lw=0)
#ax.contour(t, x, sig, hatch='//',cmap=mpl.colors.ListedColormap(['none']),edgecolor=[0.8,0.8,0.8],lw=0)

ax.set_xticks(t)
ax.set_xticklabels(['1','','3','','5','','7','','9','','11','','13','','15'],fontsize=fontsize)
ax.set_xlabel(r'lead time [days]',fontsize=fontsize)

ax.set_yticks(x2)
ax.set_yticklabels(['1/18/0.25','9/162/2.25','19/342/4.75','29/522/7.25','39/702/9.75','49/882/12.25','59/1062/14.75'],fontsize=fontsize)
ax.set_ylabel(r'spatial scale [gridpoints$^2$/km$^2$/degrees$^2$]',fontsize=fontsize)
ax.set_xlim([1,15])
ax.set_ylim([x[0],x[-1]])

cb = fig.colorbar(p, ax=ax, orientation='vertical',ticks=clevs[::2],pad=0.025,aspect=15)
cb.ax.set_title('fss',fontsize=fontsize)
cb.ax.tick_params(labelsize=fontsize,size=0)

plt.tight_layout()
if write2file: plt.savefig(path_out + figname_out)
plt.show()


